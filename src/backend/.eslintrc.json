{
  "root": true,
  "env": {
    "node": true,
    "es2022": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "node",
    "security",
    "jest"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:node/recommended",
    "plugin:security/recommended",
    "plugin:jest/recommended",
    "prettier"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "tsconfig.json"
      },
      "node": {
        "extensions": [
          ".js",
          ".ts"
        ]
      }
    }
  },
  "rules": {
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "prefix": ["I"]
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        "selector": "enum",
        "format": ["PascalCase"]
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "import/no-duplicates": "error",
    "import/no-unresolved": "error",
    "import/first": "error",
    "import/no-cycle": "error",
    "node/no-missing-import": "off",
    "node/no-unsupported-features/es-syntax": "off",
    "node/no-unpublished-import": "off",
    "security/detect-object-injection": "off",
    "security/detect-non-literal-fs-filename": "off",
    "no-console": [
      "warn",
      {
        "allow": [
          "warn",
          "error",
          "info"
        ]
      }
    ],
    "prefer-const": "error",
    "eqeqeq": [
      "error",
      "always"
    ],
    "curly": [
      "error",
      "all"
    ],
    "no-return-await": "error",
    "no-throw-literal": "error",
    "no-var": "error",
    "no-unused-expressions": "error",
    "no-undef": "error",
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1,
        "maxEOF": 1
      }
    ],
    "jest/no-disabled-tests": "warn",
    "jest/no-focused-tests": "error",
    "jest/no-identical-title": "error",
    "jest/prefer-to-have-length": "warn",
    "jest/valid-expect": "error"
  },
  "overrides": [
    {
      "files": [
        "**/*.test.ts",
        "**/*.spec.ts",
        "tests/**/*.ts"
      ],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "security/detect-object-injection": "off"
      }
    },
    {
      "files": [
        "prisma/seed.ts"
      ],
      "rules": {
        "node/no-unpublished-import": "off"
      }
    }
  ],
  "ignorePatterns": [
    "node_modules/",
    "dist/",
    "coverage/",
    "**/*.js",
    "**/*.d.ts",
    "jest.config.ts"
  ]
}