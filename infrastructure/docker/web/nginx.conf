# Revolucare Nginx Configuration
# This configuration is optimized for serving Next.js applications in a Docker container

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # MIME types and default type
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging settings
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Timeouts
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;
    
    # Compression settings
    gzip on;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/javascript application/javascript application/json application/xml image/svg+xml;
    gzip_min_length 1000;
    gzip_proxied any;
    
    # Server block
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        error_page 404 /404.html;
        client_max_body_size 10M;
        
        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://polyfill.io; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https://revolucare-storage.vercel.app https://images.unsplash.com; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://api.revolucare.com; frame-ancestors 'none';" always;
        
        # Next.js static files
        location /_next/static/ {
            alias /usr/share/nginx/html/_next/static/;
            expires 365d;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        
        # Static files
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 365d;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        
        # Favicon
        location = /favicon.ico {
            expires 365d;
            add_header Cache-Control "public, max-age=31536000";
        }
        
        # Robots.txt
        location = /robots.txt {
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }
        
        # API routes - proxy to Next.js server
        location /api/ {
            # In Docker, we use the service name as defined in docker-compose
            proxy_pass http://app:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # For Next.js pages, we need to proxy to the Next.js server
        location / {
            # First attempt to serve static files from nginx
            try_files $uri $uri.html $uri/ @nextjs;
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
        }
        
        # Proxy to Next.js server for dynamic content
        location @nextjs {
            proxy_pass http://app:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}