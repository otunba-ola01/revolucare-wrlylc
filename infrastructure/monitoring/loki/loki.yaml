# loki.yaml - Revolucare monitoring log aggregation configuration
# Version: 2.8.0
#
# This file configures the Loki log aggregation system for the Revolucare platform.
# It defines the Loki deployment, service, configuration, and storage settings
# for collecting, storing, and querying logs from all platform components.
#
# Integrated with:
# - Prometheus v2.45.0
# - Grafana for visualization
# - Vector and Fluentbit for log collection

# Loki server configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
      http_server_read_timeout: 30s
      http_server_write_timeout: 30s
      grpc_server_max_recv_msg_size: 4194304
      grpc_server_max_send_msg_size: 4194304

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /data/loki/chunks
          rules_directory: /data/loki/rules
      replication_factor: 1
      ring:
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2022-01-01
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_query_length: 721h
      max_query_parallelism: 32
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20
      per_stream_rate_limit: "10MB"
      per_stream_rate_limit_burst: "20MB"
      max_entries_limit_per_query: 10000

    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1h
      chunk_retain_period: 30s
      max_transfer_retries: 0
      wal:
        enabled: true
        dir: /data/loki/wal

    storage_config:
      boltdb_shipper:
        active_index_directory: /data/loki/boltdb-shipper-active
        cache_location: /data/loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
      filesystem:
        directory: /data/loki/chunks

    compactor:
      working_directory: /data/loki/compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150

    ruler:
      storage:
        type: local
        local:
          directory: /data/loki/rules
      rule_path: /data/loki/rules
      alertmanager_url: http://alertmanager:9093
      ring:
        kvstore:
          store: inmemory
      enable_api: true
      enable_alertmanager_v2: true

    analytics:
      reporting_enabled: false

    query_range:
      align_queries_with_step: true
      max_retries: 5
      cache_results: true
      results_cache:
        cache:
          enable_fifocache: true
          fifocache:
            max_size_items: 1024
            validity: 24h

    frontend:
      compress_responses: true
      log_queries_longer_than: 10s
      max_outstanding_per_tenant: 2048

    frontend_worker:
      frontend_address: loki-query-frontend:9095
      grpc_client_config:
        max_send_msg_size: 4194304

# Loki deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
spec:
  replicas: 2
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"
    spec:
      serviceAccountName: loki
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
        - name: loki
          image: grafana/loki:2.8.0
          imagePullPolicy: IfNotPresent
          args:
            - "-config.file=/etc/loki/loki.yaml"
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9096
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 300
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          volumeMounts:
            - name: config
              mountPath: /etc/loki
            - name: data
              mountPath: /data
      volumes:
        - name: config
          configMap:
            name: loki-config
        - name: data
          persistentVolumeClaim:
            claimName: loki-storage

# Loki service
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
spec:
  type: ClusterIP
  ports:
    - port: 3100
      targetPort: 3100
      protocol: TCP
      name: http-metrics
  selector:
    app: loki

# Persistent storage for Loki
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp2

# Environment-specific settings:
# Development:
#   replicas: 1
#   storage: 10Gi
#   retention: application_logs=7d, system_logs=3d, audit_logs=30d, access_logs=7d
#
# Staging:
#   replicas: 2
#   storage: 20Gi
#   retention: application_logs=14d, system_logs=7d, audit_logs=90d, access_logs=14d
#
# Production:
#   replicas: 3
#   storage: 50Gi
#   retention: application_logs=30d, system_logs=14d, audit_logs=365d, access_logs=30d

# Integration points:
# Prometheus integration:
#   - metrics endpoint: /metrics
#   - service discovery: enabled
#   - alert rules:
#     - LokiRequestErrors: sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[5m])) by (namespace, job)
#                          / sum(rate(loki_request_duration_seconds_count[5m])) by (namespace, job) > 0.05
#     - LokiRequestLatency: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[5m]))
#                           by (le, job)) > 1
#
# Grafana integration:
#   - datasource: name=Loki, type=loki, url=http://loki:3100, access=proxy, 
#     jsonData={maxLines: 1000, derivedFields: [{name: 'traceID', matcherRegex: 'traceID=(\\w+)', 
#     url: 'http://tempo:3100/tempo/${__value.raw}'}]}
#   - dashboards: 
#     - infrastructure/monitoring/grafana/dashboards/loki-logs-overview.json
#     - infrastructure/monitoring/grafana/dashboards/loki-logs-explorer.json
#
# Vector integration:
#   - endpoint: http://loki:3100/loki/api/v1/push
#   - batch: max_events=1000, timeout_secs=1
#
# Fluentbit integration:
#   - endpoint: http://loki:3100/loki/api/v1/push
#   - match: *
#   - labels: job=fluentbit, env=${ENVIRONMENT}

# Network policy:
# - Allow ingress from: grafana, prometheus, vector, fluentbit
# - Ports: 3100/TCP
#
# RBAC:
# - ServiceAccount: loki
# - Role: Permissions to get, list, and watch pods

# Encryption:
# - At rest: true
# - In transit: true

# Exports:
# loki_service_url: http://loki:3100
# This URL is used by other components to connect to Loki