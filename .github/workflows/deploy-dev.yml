name: Deploy to Development
on:
  workflow_run:
    workflows: ["Backend CI", "Web CI"]
    branches: [develop]
    types: [completed]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend services'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend application'
        type: boolean
        default: true
      deploy_infrastructure:
        description: 'Update infrastructure'
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  PULUMI_VERSION: '3.78.1'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_BACKEND: 'revolucare-backend'
  ECR_REPOSITORY_FRONTEND: 'revolucare-frontend'
  BACKEND_WORKING_DIRECTORY: './src/backend'
  FRONTEND_WORKING_DIRECTORY: './src/web'
  INFRASTRUCTURE_WORKING_DIRECTORY: './infrastructure/pulumi'
  ENVIRONMENT: 'dev'

jobs:
  check-conditions:
    name: Check Deployment Conditions
    runs-on: ubuntu-latest
    outputs:
      deploy_backend: ${{ steps.set-conditions.outputs.deploy_backend }}
      deploy_frontend: ${{ steps.set-conditions.outputs.deploy_frontend }}
      deploy_infrastructure: ${{ steps.set-conditions.outputs.deploy_infrastructure }}
    steps:
      - name: Set deployment conditions
        id: set-conditions
        run: |
          echo "deploy_backend=${{ github.event.inputs.deploy_backend || (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Backend CI' && github.event.workflow_run.conclusion == 'success') }}" >> $GITHUB_OUTPUT
          echo "deploy_frontend=${{ github.event.inputs.deploy_frontend || (github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Web CI' && github.event.workflow_run.conclusion == 'success') }}" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=${{ github.event.inputs.deploy_infrastructure || false }}" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [check-conditions]
    if: "needs.check-conditions.outputs.deploy_infrastructure == 'true'"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.INFRASTRUCTURE_WORKING_DIRECTORY }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: ${{ env.INFRASTRUCTURE_WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Install Pulumi CLI
        run: curl -fsSL https://get.pulumi.com | sh -s -- --version ${{ env.PULUMI_VERSION }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Pulumi up
        uses: pulumi/actions@v4
        with:
          command: up
          stack-name: ${{ env.ENVIRONMENT }}
          work-dir: ${{ env.INFRASTRUCTURE_WORKING_DIRECTORY }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [check-conditions, deploy-infrastructure]
    if: "needs.check-conditions.outputs.deploy_backend == 'true'"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          file: ./infrastructure/docker/backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ env.ENVIRONMENT }}-${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ env.ENVIRONMENT }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create new ECS task definition
        run: aws ecs register-task-definition --cli-input-json file://infrastructure/ci-cd/taskdef-${{ env.ENVIRONMENT }}.json --family revolucare-backend-${{ env.ENVIRONMENT }}
      
      - name: Update ECS service
        run: aws ecs update-service --cluster revolucare-${{ env.ENVIRONMENT }} --service revolucare-backend-${{ env.ENVIRONMENT }} --task-definition revolucare-backend-${{ env.ENVIRONMENT }} --force-new-deployment
      
      - name: Wait for deployment to complete
        run: aws ecs wait services-stable --cluster revolucare-${{ env.ENVIRONMENT }} --services revolucare-backend-${{ env.ENVIRONMENT }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [check-conditions, deploy-infrastructure]
    if: "needs.check-conditions.outputs.deploy_frontend == 'true'"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.FRONTEND_WORKING_DIRECTORY }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Build application
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.DEV_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: ${{ env.ENVIRONMENT }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to Vercel
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npx vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --yes
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_DEV_PROJECT_ID }}

  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: "always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run smoke tests
        working-directory: ${{ env.FRONTEND_WORKING_DIRECTORY }}
        run: npm run test:smoke
        env:
          TEST_BASE_URL: ${{ secrets.DEV_APP_URL }}
      
      - name: Check API health
        run: curl -sSf ${{ secrets.DEV_API_URL }}/health || exit 1

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend, deploy-frontend, post-deployment-tests]
    if: 'always()'
    steps:
      - name: Summarize deployment
        run: echo "Deployment to development environment completed.\nInfrastructure: ${{ needs.deploy-infrastructure.result || 'skipped' }}\nBackend: ${{ needs.deploy-backend.result || 'skipped' }}\nFrontend: ${{ needs.deploy-frontend.result || 'skipped' }}\nPost-deployment tests: ${{ needs.post-deployment-tests.result || 'skipped' }}"
      
      - name: Notify on failure
        if: "contains(needs.*.result, 'failure')"
        run: echo "::error::Deployment to development environment failed. Please check the logs for details."
      
      - name: Create deployment record
        uses: actions/github-script@v6
        with:
          script: "const deployment = {\n  environment: 'development',\n  sha: context.sha,\n  workflow: context.workflow,\n  runId: context.runId,\n  status: !contains(Object.values(context.needs).map(n => n.result), 'failure') ? 'success' : 'failure',\n  timestamp: new Date().toISOString(),\n  infrastructure: context.needs['deploy-infrastructure']?.result || 'skipped',\n  backend: context.needs['deploy-backend']?.result || 'skipped',\n  frontend: context.needs['deploy-frontend']?.result || 'skipped',\n  tests: context.needs['post-deployment-tests']?.result || 'skipped'\n};\n\nawait github.rest.repos.createOrUpdateFileContents({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  path: `deployments/development/${context.sha}.json`,\n  message: `Deployment record for development - ${context.sha}`,\n  content: Buffer.from(JSON.stringify(deployment, null, 2)).toString('base64'),\n  committer: {\n    name: 'GitHub Actions',\n    email: 'actions@github.com'\n  }\n});"