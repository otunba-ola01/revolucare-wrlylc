name: Web CI Workflow

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/web/**'
      - '.github/workflows/web-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/web/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: '1'
  WORKING_DIRECTORY: './src/web'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
      
      - name: Check formatting with Prettier
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run format:check
      
      - name: Type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:ci
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WORKING_DIRECTORY }}/coverage
          flags: web,unittests
          fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: ${{ env.WORKING_DIRECTORY }}/.next
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx playwright install --with-deps
      
      - name: Build application for E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
      
      - name: Start application in background
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run start & npx wait-on http://localhost:3000
      
      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: ${{ env.WORKING_DIRECTORY }}/playwright-report/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm audit --production --audit-level=high
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: '--severity-threshold=high'

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
      
      - name: Start application in background
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run start & npx wait-on http://localhost:3000
      
      - name: Run accessibility tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx axe-core-scan http://localhost:3000 --exit-zero-on-violation

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, build, e2e-tests, security-scan, accessibility-check]
    if: always()
    steps:
      - name: Check job statuses
        run: "echo 'CI pipeline completed with status: ${{ job.status }}'"